#! /bin/sh
show_version() {
	wr -s <<- .
	$APP version 2017.42

	(c) 2014-2017 by Guenther Brunthaler.
	This script is free software.
	Distribution is permitted under the terms of the GPLv3.

	Application menu icon "Lock heart"
	(c) 2013 by User 'dear_theophilus' from 'openclipart.org'.
.
}
APP=${0##*/}
APP_UUID=66vqawws41ff2spi2sulrp0q5

die() {
	echo "ERROR: $*" >& 2
	false || exit
}

which2() {
	which "$1" 2> /dev/null || return
}

wr() {
	if test -n "$fmt"
	then
		test -z "$*" && set -- -c
		"$fmt" -w "$LINEWIDTH" "$@"
	elif test -n "$fold"
	then
		"$fold" -s -w $LINEWIDTH
	else
		cat
	fi
}
LINEWIDTH=72
fmt=`which2 fmt` || fmt=
if test -z "$fmt"
then
	fold=`which2 fold` || fold=
fi

need() {
	which2 "$1" > /dev/null && return
	die "Cannot run: Command '$1' is not installed."
}

rmie() {
	while test $# != 0
	do
		test -e "$1" && rm -- "$1"
		shift
	done
}

xmessageMBCS() {
	local cs file
	file=$1; shift
	cs=ISO-8859-15 # xmessage does not support UTF-8.
	iconv -ct "$cs" "$file" \
	| LC_CTYPE="$cs" xmessage "$@" -file - 2> /dev/null || :
}

# Set $button to the name of the button pressed.
# First argument is always default button ("OK" is assumed without arguments).
# If there is more than one argument, the last argument must be a
# "cancel/abort" button and will generate a failure return code.
request() {
	local dfl abort
	dfl=; button=
	test $# = 0 && set -- OK
	abort=$#
	while test $# != 0
	do
		test -z "$dfl" && dfl=$1
		if test $# = 1
		then
			if test "$abort" != 1
			then
				abort=$1
			else
				abort=
			fi
		fi
		button=$button${button:+,}$1; shift
	done
	exec >& -
	button=`
		xmessageMBCS "$progress" \
			-buttons "$button" -default "$dfl" -print \
			2> /dev/null || :
	` || button=$abort
	exec > "$progress"
	test -n "$button"
	test x"$button" != x"$abort" || return
}

do_gpg() {
	"$gpg2" --batch --no-tty "$@"
}

# $RECV needs to have already been set.
encrypt() {
	local cs out out_dec charset out_enc out_enc_hdr
	out=$TDIR/out_local.txt
	xclip -selection clipboard -o > "$out"
	cat <<- . | wr

	The output message has been fetched from the clipboard.
.
	out_dec=$TDIR/out.txt
	for cs in ISO-8859-1 ISO-8859-15 UTF-8 die
	do
		iconv -t "$cs" "$out" > "$out_dec" && break
		test x"$cs" != x"die"
	done
	echo "It has been converted to character set $cs." | wr
	out_enc=$TDIR/out.asc
	rmie "$out_enc"
	set -- do_gpg --encrypt --set-filename "" --output "$out_enc" --armor
	while read recv
	do
		echo "Encrypting to receiver $recv." | wr
		set -- "$@" -r "$recv"
	done < "$RECV"
	"$@" "$out_dec"

	out_enc_hdr=$TDIR/out_patched.asc
	sed "
		/^---.*BEGIN .*MESSAGE/ {
			p; s/.*/Charset: $cs/
		}
	" "$out_enc" > "$out_enc_hdr"

	xclip -selection clipboard -i "$out_enc_hdr"

	cat <<- . | wr
	The encrypted output message is now available as the clipboard's new
	contents.
.
}

reply() {
	local charset in_enc dec_log keys own in_dec inp
	in_enc=$TDIR/in.asc
	{
		xclip -selection clipboard -o
		echo
	} > "$in_enc"
	test -s "$in_enc"

	charset=`grep -i '^Charset:' "$in_enc" | awk '{print $2}'` || :
	if test -n "$charset"
	then
		echo "Message encoding is $charset." | wr
	else
		charset=ISO-8859-1
		echo "Assuming message encoding as $charset." | wr
	fi

	in_dec=$TDIR/in_foreign.txt
	dec_log=$TDIR/dec_log.txt
	keys=$TDIR/dec_keys.txt
	echo "Decrypting message..." | wr
	rmie "$in_dec"
	do_gpg --keyid-format=long --output="$in_dec" "$in_enc" \
		2> "$dec_log"
	if test ! -s "$in_dec"
	then
		cat <<- . | wr
		Could not decrypt message, or encrypted message was empty.
		
		Anyway, giving up.
.
		return
	fi
	sed 's/^gpg:.*, ID \([0-9A-F]\{16\}\),.*/\1/; t; d' \
		"$dec_log" | sort > "$keys"
	test -s "$in_dec"; test -s "$keys"

	own=$TDIR/own_key_ids.txt
	if test ! -e "$own" || test ! -s "$own"
	then
		do_gpg --list-secret-keys --with-colons \
			| grep '^\(sec\|ssb\):' | cut -d: -f5 | sort > "$own"
		test -s "$own"
	fi

	RECV=$TDIR/receiver_ids.txt
	join -v1 "$keys" "$own" > "$RECV"
	
	inp=$TDIR/in.txt
	iconv -f "$charset" "$in_dec" > "$inp"
	
	xclip -selection clipboard -i "$inp"
	cat <<- . | wr

	The decrypted message has been converted to the local character set
	and is now available as the clipboard's new contents.
.
	while :
	do
		cat <<- . | wr

		Reply to the encrypted e-mail message now, and insert the text
		from the clipboard as quoted text.
		
		Then finish the e-mail by adding your reply text, and copy the
		whole resulting e-mail text back into the clipboard.
		
		Finally,

		*
		  press "Encrypt" to encrypt the e-Mail to the original
		  sender,
		*
		  press "Kludge" to further convert the already decrypted and
		  character-set converted decoded message into the Latin-1
		  character set. It this fails, try Latin-9 and then
		  WINDOWS-1252 (a.k.a. "ANSI" under MS Windows) instead. Use
		  this if umlauts in the current clipboard contents have
		  obviously been decrypted incorrectly, which seems to be a
		  bug in some versions of EnigMail when creating UTF-8 encoded
		  PGP messages.
		*
		  press "Quit" to terminate the application prematurely, or
		*
		  press "Cancel" to abort the reply operation in progress and
		  return to the main menu instead.
.
		request Encrypt Cancel Kludge Quit || return
		test $button = Cancel && return
		test $button != Kludge && break
		for cs in LATIN1 LATIN9 WINDOWS-1252
		do
			if
				iconv -t $cs "$inp" \
				| xclip -selection clipboard -i
			then
				cat <<- . | wr
					Successfully applied an additional
					conversion to $cs character set on top
					of the decrypted message with
					already-applied character set
					conversion as specified in the PGP
					"Charset"-header in an attempt to fix
					incorrectly encoded umlauts in the
					original message.
.
				continue 2
			fi
		done
		cat <<- . | wr
			Failed: None of the conversions to fix the umlauts did
			work. Leaving decrypted message as is.
.
		xclip -selection clipboard -i "$inp"
	done
	encrypt || return
	cat <<- . | wr
	Paste it into the already-open reply e-mail message window now,
	replacing the previously edited unencrypthed output message with the
	encrypted version.
	
	Then send the reply e-mail.
.
}

new() {
	local r any dec_log

	dec_log=$TDIR/dec_log.txt
	{
		xclip -selection clipboard -o
		echo
	} > "$dec_log"
	test -s "$dec_log"

	RECV=$TDIR/receiver_ids.txt
	{
		{
			cat "$dec_log"; echo
			x=A-Fa-f0-9; nx="[^$x]"; x="[$x]"
			s='^'$nx'*\('$x'\{6,\}\)'$nx'*'
			sed 's/'"$s"'/<\1>\\n/g; t; d' "$dec_log"
			s='^[^<]*<\([^<>]\+\)>[^<]*'
			sed 's/'"$s"'/\1\\n/g; t; d' "$dec_log"
		} | awk -F '\\\\n' '{for (i= 1; i <= NF; ++i) print $i}' \
		| {
			s=`printf '[\t\b\v ]'`
			sed 's/^'"$s"'*//; s/'"$s"'*$//' | sed '/^$/d'
		} | sort -u \
		| while read recv
		do
			do_gpg --list-public-keys --with-colons \
				--fixed-list-mode -- "$recv" || :
		done \
		| cut -d: -f1,2,5,12 | grep '^pub:[mfu].*:.*:[^:Dd]*$' \
		| grep ':[^:]*E[^:]*$' | cut -d: -f3 | sort -u
	} 2> /dev/null > "$RECV"
	
	{
		echo "The following receivers have been selected:"
		echo
		set -- do_gpg --list-public-keys
		any=
		while read r
		do
			set -- "$@" "$r"
			any=y
		done < "$RECV"
		if test -z "$any"
		then
			{ echo "ERROR: No recpients match!"; echo; } | wr
			return
		fi
		"$@"
	} | wr -s
	cat <<- . | wr

	Now copy the new message into the clipboard, encoded using the
	configured character set of your locale.
.
	request Encrypt Quit || return
	encrypt || return
	cat <<- . | wr
	
	Paste it into a new e-mail message window.
	
	Then set subject and recipient and send the e-mail.
.
}

ensure_dirs() {
	local d b
	for d
	do
		test -d "$d" && continue
		b=`dirname "$d"`
		ensure_dirs "$b"
		mkdir -- "$d"
	done
}

# Join indented lines with previous lines, replacing all indendation with a
# single space.
unfold() {
	local line segment indented
	line=
	while IFS= read -r segment
	do
		if indented=`expr x"$segment" : x'[[:space:]]\+\(.*\)'`
		then
			line=$line${line:+ }$indented
		else
			test -n "$line" && printf '%s\n' "$line"
			line=$segment
		fi
	done
	test -n "$line" && printf '%s\n' "$line"
}

gen_desktop() {
	local script base
	script=$0
	test ! -f "$script" && script=`which "$0"`
	if ! test x"${script#/}" != x"$script"
	then
		base=`pwd`
		while :
		do
			case $script in
				"./"*) script=${script#*/};;
				"../"*)
					script=${script#*/}
					base=`dirname "$base"`
					;;
				*) break
			esac
		done
		script=$base/$script
	fi
	test -n "$script" && test -f "$script" && test -x "$script" ||
		die "$APP script not found or not executable!"
	cat << . | unfold
[Desktop Entry]
Version=1.0
Terminal=false
TryExec=$script
Exec=$script
Icon=lockheart-$APP_UUID
Type=Application
Categories=Utility;Security;
Name=GnuPG Clipboard Utility
Comment=Reply to or encrypt new PGP-encrypted e-mail via the clipboard
Comment[de]=Mit Hilfe der Zwischenablage auf PGP-verschlÃ¼sselte e-Mails
	antworten oder neue erstellen
Encoding=UTF-8
.
}

gen_appicon() {
	cat << . | openssl base64 -d
iVBORw0KGgoAAAANSUhEUgAAABgAAAATCAYAAACKsM07AAAEMElEQVQ4jY2UX2hW
ZRzHP89zzvuc8/7pZcoYXiS6m0hihBSbmuSf0sAoctV7aQiCeBM0twTBeZxEbdMo
IkHwRpZK02YQFVM2lcorb3YRyJIVTMVqG/r+O+/OOc/zdOH2Mpezvte/3/fze35/
HsGcRnp7Wx0pD1vYAJSBb3UcH3714MEZnqDvgqAxsfaItfZNIIe1PxvHOfJOENwA
EABX+voKCDEAKOAm8DSQA+4ZKd9+Zf/+648zHwqCjRjzDdA0V9Rt4FmgJqx9b+fR
o4PyyvHj6+bMIwuvb+nqWoPrrsTas8AKaczlkb6+7QBnzpxpOHXq1HKAC93d2zFm
GGgS8JWQcmV7T88apHwDSKwQAxeDoFVc6e8fBrYjxLtbOjsvzFdnreVqf//nCPE+
EE35/id/O86HQC1fKh3JVCq9cy/+rL2n54OFL7t46FDBCvG1sPYHcaW/vwSwubPz
KSHEIy2w1nLt2LHjUSrVMeF5SRTHbhzHKNeNmopFpeL407d6evY/mgUWGOrurgiI
pIAZIHO1v3/F4h4LIfitoWHkd9+PlOe5SikAKmGo/sznq/ebmwcWmwOcD4IVAnwL
96UV4iwgEeL8YBCohYHnzp1rjeP4ojZG1Wo1lFL4vo/WmmoYZiqVyk+nT59uXZgz
GATKfTh4KYQ4K1NafwTcAjY2ZTJfzAcODAxsKBaL13zfV8YYrLVMTEwwNTVFKpVC
a025XM6VSqWREydOrJvPc435koerPp4I8bEAGO3tfUZI+QtwP/S85+7lcpvL5fKP
2WxWxnFMKpVibGyMsbExAFpaWli9ejW1Wg3Hcchms2XHcV5rvnnzRm3Zsl+BBqR8
qT0IxiXA1gMHxq3Wm3Qct93NZLaGYfi953myVCqRSqWI45gwDOttKBaLuK6L53kY
Y6hUKjmt9eXbLS0vpqRcL6Xc1B4E4zB3aPMaGhpaPj09Pam1ziRJguu6hGFIPp/n
wYMHjI6OYq2lra0Nz/PwPI8kSZidnUVKSSaTKWez2VV79uypX79cCPB9v+z7/i3H
ceqVZzIZSqUS+XwerTXGGJRSSCmJoqj+Eq01URRV8/l8daHnI4AdO3ZE1tr1nudd
l1KilCKKItLpNHfu3KFarVKtVonjGK01Qog6JJ1OT+RyubWFQqG2JABg165d1TAM
tyml6pA4jpmenq7HTE5O1tdVCIHWesIY07Jv3767i/0edycAnDx5MpNOp4ejKNqo
taZYLCKlpFKpoJTCcRyUUiRJ8ocQ4oWOjo7H/rpLAhZDjDH1Yc7MzJDL5TDG3DLG
PN/V1VVdyuOJAIDBwUG/VqsNz87OvmytpVQqAZAkyV9NTU2rdu/eXXtS/r9msFiF
QqHW2Ni4zff9S0IIXNfFWjvR0NDQ/F/m/wsAD7erWq3uTKfTl4QQN5IkWbt3794l
27JQ/wBBve7QFdPUJgAAAABJRU5ErkJggg==
.
}

tools() {
	need openssl
	: ${HOME:?'No $HOME directory has been set!'}
	: ${XDG_DATA_HOME:=$HOME/.local/share}
	local icon desktop any
	icon=$XDG_DATA_HOME/icons
	desktop=$XDG_DATA_HOME/applications
	ensure_dirs "$icon" "$desktop"
	desktop=$desktop/gpgutil-$APP_UUID.desktop
	icon=$icon/lockheart-$APP_UUID.png
	cat <<- . | wr
	Select one of the following utility functions:
	
	*
	  Press "Install" to install a menu entry for the current user which
	  runs the $APP script at its current location. This can also be used
	  for re-installing $APP after the script has been moved to a
	  different location within the file system.

	*
	  Press "Uninstall" to remove the menu entry which has been installed
	  pressing "Install" at some point in the past.
	  
	*
	  Press "Back" to leave this menu and return to the main menu instead.
.
	request Install Uninstall Back || { true && return; }
	case $button in
		Install)
			echo "Installing icon '$icon'..."
			gen_appicon > "$icon"
			echo "Installing desktop information file" \
				"'$desktop'..."
			gen_desktop > "$desktop"
			;;
		Uninstall)
			local f
			for f in "$icon" "$desktop"
			do
				if test -f "$f"
				then
					echo "Removing file '$f'..."
					rm -- "$f"
				fi
			done
			;;
		*) false || exit
	esac
	cat <<- . | wr

		Now the desktop menus needs to be refreshed.
		
		Press "Refresh" to attempt refreshing the desktop menu.
		
		Note that this can take a several seconds, depending on your
		desktop environment.
		
		So please be patient.
.
	request Refresh Abort || { true && return; }
	any=
	xdg-desktop-menu forceupdate > /dev/null 2>& 1 && any=y
	update-menus > /dev/null 2>& 1 && any=y
	if test -n "$any"
	then
		echo "Desktop menus have been updated successfully."
	else
		cat <<- .
			No supported method of updating the desktop menu has
			been found. Please update the menus manually by
			appropriate means.
			
			In some desktop environments, logging out and and
			logging in again will automatically refresh the menus.
.
	fi | wr
	request || true
}

set -e
if ! xauth -q nlist > /dev/null
then
	die "GUI is not accessible!"
fi
need xmessage
need mktemp

TDIR=`mktemp --tmpdir -d "$APP".XXXXXXXXXX`
test -n "$TDIR"
test -d "$TDIR"

cleanup() {
	rc=$?
	echo "Failed!" >& 2
	test -n "$errfile" && exec 2>& -
	test -n "$progress" && exec >& -
	exec 2> /dev/null
	if test $rc != 0 && test -n "$errfile"
	then
		xmessageMBCS "$errfile" -buttons "Terminate" || :
	fi
	rm -r -- "$TDIR" || :
}
errfile=
progress=
trap cleanup 0

errfile=$TDIR/errfile
exec 2> "$errfile"
progress=$TDIR/progress
exec > "$progress"

true && success=$?; false || failure=$?

show_version; echo

need awk
need iconv
need join
need xclip

if ! { gpg2=`which2 gpg2` && test -x "$gpg2"; }
then
	gpg2=`which2 gpg` && test -x "$gpg2" || gpg2=
fi
test -n "$gpg2" \
&& v=`
	"$gpg2" --version 2> /dev/null \
		| sed '1!d; s/.*\(gpg\|GnuPG\)[^0-9]*//; s/[^0-9].*//'
` \
&& expr x"$v" : x'[0-9]\+$' > /dev/null \
&& test $v -ge 2 \
|| die "GnuPG version 2 or later needs to be installed!"

gpgax=gpg-agent2
which2 "$gpgax" > /dev/null || gpgax=gpg-agent
phase=try
while
	test -z "$GPG_AGENT_INFO" || {
		t=${GPG_AGENT_INFO%:*}
		test x"$t" = x"$GPG_AGENT_INFO"
	} || {
		t2=${t##*:}
		test x"$t2" = x"$t"
	} || {
		t=/proc/$t2/exe
		test ! -L "$t"
	} || ! t=`readlink "$t"` || test -z "$t" || test ! -f "$t" \
	|| test x"${t##*/}" != x"$gpgax"
do
	test -n "$HOME"
	cache=$HOME/.cache
	if test ! -d "$cache"
	then
		phase=new
		mkdir -- "$cache"
	fi
	cache=$cache/gpg-agent.env
	if test ! -f "$cache"
	then
		phase=new
		test ! -e "$cache"
		> "$cache"
		chmod 600 -- "$cache"
	fi
	case $phase in
		try)
			echo "Trying to re-load saved $gpgax environment" \
				"from '$cache'..." | wr
			phase=new;;
		new)
			echo "Launching $gpgax..." | wr
			need "$gpgax"
			{
				# gpg-agent will not write anything for GnuPG
				# version 2.1 or later.
				echo GPG_AGENT_INFO=not_needed
				"$gpgax" -q --daemon
			} > "$cache"
			phase=fail
			;;
		*)
			die "Could not start $gpgax!"
	esac
	unset GPG_AGENT_INFO; . "$cache"
	if test x"$GPG_AGENT_INFO" = x'not_needed'
	then
		# Since GnuPG 2.1, $GPG_AGENT_INFO is no longer used and the
		# existence of a socket indicates the agent is running.
		if test -S "${GNUPGHOME:-"$HOME/.gnupg"}/S.gpg-agent"
		then
			unset GPG_AGENT_INFO
			phase=try
			break
		fi
	fi
done
if test $phase = try
then
	if test -n "$GPG_AGENT_INFO"
	then
		echo "Using existing settings for $gpgax from" \
			"\$GPG_AGENT_INFO."
	else
		echo "$gpgax is already running; using it."
	fi | wr
fi

while :
do
	cat <<- . | wr

	In order to decrypt an existing PGP message for subsequent reply, copy
	the encrypted message into the clipboard, then press "Reply".
	
	For encrypting a new PGP message, copy the recipients'
	e-mail-addresses or PGP key IDs into the clipboard, then press "New".

	Press "Tools" for less frequently used options.
	
	Or press "Exit" to quit this application.
.
	request Reply New Tools Exit || break
	case $button in
		Reply) reply || break;;
		New) new || break;;
		Tools) tools || break;;
		*) false || exit
	esac
done
